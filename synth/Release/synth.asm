; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27025.1 

	TITLE	D:\dev\raw4k\synth\synth.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_KICKS
PUBLIC	_HATS
CONST	SEGMENT
_KICKS	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
_HATS	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
CONST	ENDS
PUBLIC	_runSynth@4
PUBLIC	__real@00000000
PUBLIC	__real@37be37c6
PUBLIC	__real@3daaaaab
PUBLIC	__real@3e000000
PUBLIC	__real@3e800000
PUBLIC	__real@3ea8f5c3
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f266666
PUBLIC	__real@3f800000
PUBLIC	__real@3fa2f983
PUBLIC	__real@40000000
PUBLIC	__real@402e147b
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40833333
PUBLIC	__real@40c90fdb
PUBLIC	__real@40c9999a
PUBLIC	__real@40e55dd180000000
PUBLIC	__real@41000000
PUBLIC	__real@41400000
PUBLIC	__real@41490fdb
PUBLIC	__real@414fd639
PUBLIC	__real@42000000
PUBLIC	__real@435c0000
PUBLIC	__real@43c80000
PUBLIC	__real@469c4000
PUBLIC	__real@46fffe00
PUBLIC	__real@bf800000
PUBLIC	__real@c1200000
PUBLIC	__real@c1f00000
EXTRN	__fltused:DWORD
;	COMDAT __real@c1f00000
CONST	SEGMENT
__real@c1f00000 DD 0c1f00000r			; -30
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@46fffe00
CONST	SEGMENT
__real@46fffe00 DD 046fffe00r			; 32767
CONST	ENDS
;	COMDAT __real@469c4000
CONST	SEGMENT
__real@469c4000 DD 0469c4000r			; 20000
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@435c0000
CONST	SEGMENT
__real@435c0000 DD 0435c0000r			; 220
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@414fd639
CONST	SEGMENT
__real@414fd639 DD 0414fd639r			; 12.9898
CONST	ENDS
;	COMDAT __real@41490fdb
CONST	SEGMENT
__real@41490fdb DD 041490fdbr			; 12.5664
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e55dd180000000
CONST	SEGMENT
__real@40e55dd180000000 DQ 040e55dd180000000r	; 43758.5
CONST	ENDS
;	COMDAT __real@40c9999a
CONST	SEGMENT
__real@40c9999a DD 040c9999ar			; 6.3
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40833333
CONST	SEGMENT
__real@40833333 DD 040833333r			; 4.1
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@402e147b
CONST	SEGMENT
__real@402e147b DD 0402e147br			; 2.72
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fa2f983
CONST	SEGMENT
__real@3fa2f983 DD 03fa2f983r			; 1.27324
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ea8f5c3
CONST	SEGMENT
__real@3ea8f5c3 DD 03ea8f5c3r			; 0.33
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e000000
CONST	SEGMENT
__real@3e000000 DD 03e000000r			; 0.125
CONST	ENDS
;	COMDAT __real@3daaaaab
CONST	SEGMENT
__real@3daaaaab DD 03daaaaabr			; 0.0833333
CONST	ENDS
;	COMDAT __real@37be37c6
CONST	SEGMENT
__real@37be37c6 DD 037be37c6r			; 2.26757e-05
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
; Function compile flags: /Ogsp
;	COMDAT _getSound
_TEXT	SEGMENT
tv150 = -32						; size = 8
_sineRamp$1$ = -24					; size = 4
_sqrRamp$1$ = -20					; size = 4
tv231 = -16						; size = 4
tv179 = -16						; size = 4
_padF$1$ = -12						; size = 4
_x$1 = -12						; size = 4
_time$1$ = -8						; size = 4
_i$2 = -8						; size = 4
_tmp$3 = -8						; size = 4
_t$1$ = -4						; size = 4
_time$ = 8						; size = 4
_getSound PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 67
	fld	DWORD PTR _time$[ebp]
	fmul	DWORD PTR __real@3e800000
; Line 39
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$1[ebp]
; Line 143
	fld	DWORD PTR _x$1[ebp]
	fistp	DWORD PTR _tmp$3[ebp]
; Line 39
	fild	DWORD PTR _tmp$3[ebp]
; Line 145
	sub	esp, 12					; 0000000cH
; Line 67
	fld	DWORD PTR __real@40800000
	fmul	ST(1), ST(0)
	fld	DWORD PTR _time$[ebp]
	fld	ST(0)
	fsubrp	ST(3), ST(0)
	fxch	ST(2)
	fstp	DWORD PTR _t$1$[ebp]
; Line 145
	fld1
	fstp	DWORD PTR [esp+8]
	fldz
	fst	QWORD PTR tv150[ebp]
	fstp	DWORD PTR [esp+4]
	fsubp	ST(1), ST(0)
	fmul	DWORD PTR __real@3daaaaab
	fstp	DWORD PTR [esp]
	call	_clamp
	fstp	DWORD PTR _sineRamp$1$[ebp]
; Line 146
	fld1
	fstp	DWORD PTR [esp+8]
	fld	QWORD PTR tv150[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _time$[ebp]
	fsub	DWORD PTR __real@41000000
	fmul	DWORD PTR __real@3e000000
	fstp	DWORD PTR [esp]
	call	_clamp
	fstp	DWORD PTR _sqrRamp$1$[ebp]
; Line 148
	fld	DWORD PTR _time$[ebp]
	add	esp, 8
	fstp	DWORD PTR [esp]
	call	_padFreq
	fstp	DWORD PTR _padF$1$[ebp]
; Line 150
	fld	DWORD PTR _t$1$[ebp]
	mov	DWORD PTR [esp], OFFSET _HATS
	push	ecx
	fstp	DWORD PTR [esp]
	call	_latestStartTime
	fsubr	DWORD PTR _t$1$[ebp]
	fst	DWORD PTR _time$1$[ebp]
; Line 124
	fmul	DWORD PTR __real@c1200000
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@402e147b
	fstp	DWORD PTR [esp]
	call	_asmPow
	fmul	DWORD PTR __real@469c4000
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	_funcRand
	fmul	DWORD PTR __real@3ea8f5c3
	fstp	DWORD PTR tv231[ebp]
	fld	DWORD PTR _time$1$[ebp]
	fmul	DWORD PTR __real@c1f00000
	fstp	DWORD PTR [esp]
	fld	DWORD PTR __real@402e147b
	push	ecx
	fstp	DWORD PTR [esp]
	call	_asmPow
	fmul	DWORD PTR tv231[ebp]
; Line 67
	xor	eax, eax
; Line 124
	add	esp, 8
; Line 67
	inc	eax
	mov	DWORD PTR _i$2[ebp], eax
; Line 124
	fstp	DWORD PTR tv179[ebp]
	fld	DWORD PTR _padF$1$[ebp]
	fadd	DWORD PTR __real@40000000
	fmul	DWORD PTR __real@40c90fdb
; Line 67
	fmul	DWORD PTR _time$[ebp]
	fld	DWORD PTR __real@3fa2f983
$LN14@getSound:
; Line 108
	fild	DWORD PTR _i$2[ebp]
	add	eax, 2
	mov	DWORD PTR _i$2[ebp], eax
; Line 109
	fld	ST(2)
	fmul	ST(0), ST(1)
	fsin
	fld	ST(2)
	fdivrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	fadd	QWORD PTR tv150[ebp]
	fstp	QWORD PTR tv150[ebp]
	cmp	eax, 5
	jle	SHORT $LN14@getSound
; Line 106
	fstp	ST(1)
	fstp	ST(0)
; Line 156
	fld1
	push	ecx
	push	ecx
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _t$1$[ebp]
	push	OFFSET _KICKS
	push	ecx
	fstp	DWORD PTR [esp]
	call	_latestStartTime
	fsubr	DWORD PTR _t$1$[ebp]
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	_kick
	fld	DWORD PTR tv179[ebp]
	fld	DWORD PTR __real@3f000000
	fmul	ST(1), ST(0)
	fxch	ST(2)
	faddp	ST(1), ST(0)
	fld	DWORD PTR _sqrRamp$1$[ebp]
	fmul	DWORD PTR __real@3e800000
	fmul	QWORD PTR tv150[ebp]
	faddp	ST(1), ST(0)
	fld	DWORD PTR _padF$1$[ebp]
	fmul	DWORD PTR __real@41490fdb
	fmul	DWORD PTR _time$[ebp]
	fsin
	fld	DWORD PTR _sineRamp$1$[ebp]
	fmulp	ST(3), ST(0)
	fmulp	ST(2), ST(0)
	faddp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	_clamp
	add	esp, 12					; 0000000cH
; Line 157
	leave
	ret	0
_getSound ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _padFreq
_TEXT	SEGMENT
_tmp$1 = -8						; size = 4
_x$2 = -4						; size = 4
_time$ = 8						; size = 4
_padFreq PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 128
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 129
	fldz
; Line 130
	fld	DWORD PTR _time$[ebp]
	fcom	ST(1)
	fnstsw	ax
	fld	DWORD PTR __real@3daaaaab
	test	ah, 5
	jp	SHORT $LN16@padFreq
	fstp	ST(1)
	fstp	ST(0)
; Line 132
	jmp	SHORT $LN6@padFreq
$LN16@padFreq:
; Line 130
	fstp	ST(2)
; Line 67
	fmulp	ST(1), ST(0)
; Line 39
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$2[ebp]
; Line 133
	fld	DWORD PTR _x$2[ebp]
	fistp	DWORD PTR _tmp$1[ebp]
; Line 39
	fild	DWORD PTR _tmp$1[ebp]
; Line 67
	fmul	DWORD PTR __real@41400000
	fsubr	DWORD PTR _time$[ebp]
; Line 134
	fld	DWORD PTR __real@40000000
	fcomp	ST(1)
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@padFreq
	fstp	ST(0)
	fld	DWORD PTR __real@40c9999a
	jmp	SHORT $LN6@padFreq
$LN4@padFreq:
; Line 135
	fcomp	DWORD PTR __real@40800000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN14@padFreq
	fld	DWORD PTR __real@40833333
	jmp	SHORT $LN6@padFreq
$LN14@padFreq:
	fldz
$LN6@padFreq:
; Line 138
	fmul	DWORD PTR __real@3daaaaab
	push	ecx
	push	ecx
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@40000000
	fstp	DWORD PTR [esp]
	call	_asmPow
	fmul	DWORD PTR __real@42000000
	add	esp, 8
; Line 139
	leave
	ret	0
_padFreq ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _hat
_TEXT	SEGMENT
tv90 = -4						; size = 4
_time$ = 8						; size = 4
_hat	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 123
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 124
	fld	DWORD PTR _time$[ebp]
	fmul	DWORD PTR __real@c1200000
	push	ecx
	push	ecx
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@402e147b
	fstp	DWORD PTR [esp]
	call	_asmPow
	fmul	DWORD PTR __real@469c4000
	add	esp, 4
	fstp	DWORD PTR [esp]
	call	_funcRand
	fmul	DWORD PTR __real@3ea8f5c3
	fstp	DWORD PTR tv90[ebp]
	fld	DWORD PTR _time$[ebp]
	fmul	DWORD PTR __real@c1f00000
	fstp	DWORD PTR [esp]
	fld	DWORD PTR __real@402e147b
	push	ecx
	fstp	DWORD PTR [esp]
	call	_asmPow
	fmul	DWORD PTR tv90[ebp]
	add	esp, 8
; Line 125
	leave
	ret	0
_hat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _kick
_TEXT	SEGMENT
tv143 = -12						; size = 8
tv145 = -4						; size = 4
_time$ = 8						; size = 4
_kick	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 116
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 119
	fld	DWORD PTR __real@3f266666
	push	ecx
	push	ecx
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _time$[ebp]
	fstp	DWORD PTR [esp]
	call	_asmPow
	fmul	DWORD PTR __real@435c0000
	fsin
	fstp	QWORD PTR tv143[ebp]
	fld	DWORD PTR _time$[ebp]
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	fld	DWORD PTR __real@3ecccccd
	push	ecx
	fstp	DWORD PTR [esp]
	call	_smoothstep
	fld1
	fld	ST(0)
	fsubrp	ST(2), ST(0)
	fxch	ST(1)
	fstp	DWORD PTR tv145[ebp]
	fstp	DWORD PTR [esp+8]
	fldz
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _time$[ebp]
	fmul	DWORD PTR __real@43c80000
	fstp	DWORD PTR [esp]
	call	_clamp
	fmul	DWORD PTR tv145[ebp]
	add	esp, 12					; 0000000cH
	fmul	QWORD PTR tv143[ebp]
; Line 120
	leave
	ret	0
_kick	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _taylorSquareWave
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_x$ = 8							; size = 4
_taylorSquareWave PROC					; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 103
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 104
	fldz
	xor	eax, eax
	fld	DWORD PTR _x$[ebp]
	inc	eax
	fld	DWORD PTR __real@3fa2f983
	mov	DWORD PTR _i$1[ebp], eax
$LN4@taylorSqua:
; Line 108
	fild	DWORD PTR _i$1[ebp]
	add	eax, 2
	mov	DWORD PTR _i$1[ebp], eax
; Line 109
	fld	ST(0)
	fmul	ST(0), ST(3)
	fsin
	fld	ST(2)
	fdivrp	ST(2), ST(0)
	fmulp	ST(1), ST(0)
	faddp	ST(3), ST(0)
	cmp	eax, 5
	jle	SHORT $LN4@taylorSqua
; Line 106
	fstp	ST(1)
	fstp	ST(0)
; Line 113
	leave
	ret	0
_taylorSquareWave ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _funcRand
_TEXT	SEGMENT
_a$1$ = -16						; size = 4
tv87 = -12						; size = 4
_x$1 = -12						; size = 4
_tmp$2 = -8						; size = 4
_x$ = -8						; size = 4
_tmp$3 = -8						; size = 4
_b$1$ = -4						; size = 4
_tmp$4 = -4						; size = 4
_x$ = -4						; size = 4
_x$ = 8							; size = 4
_funcRand PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 96
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 39
	fld	DWORD PTR _x$[ebp]
	fsub	DWORD PTR __real@3f000000
	fst	DWORD PTR tv87[ebp]
	fstp	DWORD PTR _x$[ebp]
; Line 97
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$3[ebp]
; Line 39
	fild	DWORD PTR _tmp$3[ebp]
; Line 97
	push	ecx
	fstp	DWORD PTR [esp]
	call	_hash
	fstp	DWORD PTR _a$1$[ebp]
; Line 39
	fld	DWORD PTR _x$[ebp]
; Line 97
	add	esp, 4
; Line 39
	fadd	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$[ebp]
; Line 98
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$4[ebp]
; Line 39
	fild	DWORD PTR _tmp$4[ebp]
; Line 98
	push	ecx
	fstp	DWORD PTR [esp]
	call	_hash
	fstp	DWORD PTR _b$1$[ebp]
; Line 39
	fld	DWORD PTR tv87[ebp]
; Line 98
	add	esp, 4
; Line 39
	fstp	DWORD PTR _x$1[ebp]
; Line 99
	fld	DWORD PTR _x$1[ebp]
	fistp	DWORD PTR _tmp$2[ebp]
; Line 39
	fild	DWORD PTR _tmp$2[ebp]
; Line 99
	sub	esp, 12					; 0000000cH
; Line 62
	fsubr	DWORD PTR _x$[ebp]
; Line 99
	fstp	DWORD PTR [esp+8]
	fld1
	fstp	DWORD PTR [esp+4]
	fldz
	fstp	DWORD PTR [esp]
	call	_smoothstep
; Line 57
	fld	DWORD PTR _b$1$[ebp]
; Line 99
	add	esp, 12					; 0000000cH
; Line 57
	fld	DWORD PTR _a$1$[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(2)
	fmulp	ST(1), ST(0)
	fadd	ST(0), ST(0)
	fxch	ST(1)
	fadd	ST(0), ST(0)
; Line 99
	faddp	ST(1), ST(0)
	fld1
	fsubrp	ST(1), ST(0)
; Line 100
	leave
	ret	0
_funcRand ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _hash
_TEXT	SEGMENT
tv72 = -12						; size = 8
_tmp$1 = -4						; size = 4
_x$2 = 8						; size = 4
_i$ = 8							; size = 4
_hash	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 92
	fld	DWORD PTR _i$[ebp]
	fmul	DWORD PTR __real@414fd639
	fsin
	fmul	QWORD PTR __real@40e55dd180000000
	fst	QWORD PTR tv72[ebp]
; Line 39
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$2[ebp]
; Line 92
	fld	DWORD PTR _x$2[ebp]
	fistp	DWORD PTR _tmp$1[ebp]
; Line 39
	fild	DWORD PTR _tmp$1[ebp]
; Line 62
	fsubr	QWORD PTR tv72[ebp]
; Line 93
	leave
	ret	0
_hash	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _latestStartTime
_TEXT	SEGMENT
_i$1 = 8						; size = 4
_time$ = 8						; size = 4
_track$ = 12						; size = 4
_latestStartTime PROC					; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 76
	push	ebp
	mov	ebp, esp
; Line 77
	fld	DWORD PTR _time$[ebp]
; Line 81
	xor	ecx, ecx
	fmul	DWORD PTR __real@40800000
	fld	DWORD PTR __real@c1200000
	mov	edx, DWORD PTR _track$[ebp]
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@latestStar:
; Line 82
	fild	DWORD PTR _i$1[ebp]
; Line 83
	fcom	ST(2)
	fnstsw	ax
	test	ah, 1
	je	SHORT $LN15@latestStar
; Line 84
	cmp	DWORD PTR [edx+ecx*4], 0
	jle	SHORT $LN18@latestStar
	fstp	ST(1)
	jmp	SHORT $LN2@latestStar
$LN18@latestStar:
	fstp	ST(0)
$LN2@latestStar:
; Line 81
	inc	ecx
	mov	DWORD PTR _i$1[ebp], ecx
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LN4@latestStar
; Line 83
	jmp	SHORT $LN20@latestStar
$LN15@latestStar:
	fstp	ST(2)
$LN20@latestStar:
; Line 87
	fstp	ST(1)
	fmul	DWORD PTR __real@3e800000
; Line 88
	pop	ebp
	ret	0
_latestStartTime ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _jmod
_TEXT	SEGMENT
_tmp$1 = -8						; size = 4
_x$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_jmod	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 67
	fld	DWORD PTR _a$[ebp]
	fdiv	DWORD PTR _b$[ebp]
; Line 39
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$[ebp]
; Line 67
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$1[ebp]
; Line 39
	fild	DWORD PTR _tmp$1[ebp]
; Line 67
	fmul	DWORD PTR _b$[ebp]
	fsubr	DWORD PTR _a$[ebp]
; Line 68
	leave
	ret	0
_jmod	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _fract
_TEXT	SEGMENT
_tmp$1 = -8						; size = 4
_x$ = -4						; size = 4
_a$ = 8							; size = 4
_fract	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 61
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 39
	fld	DWORD PTR _a$[ebp]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$[ebp]
; Line 62
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$1[ebp]
; Line 39
	fild	DWORD PTR _tmp$1[ebp]
; Line 62
	fsubr	DWORD PTR _a$[ebp]
; Line 63
	leave
	ret	0
_fract	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _mix
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_t$ = 16						; size = 4
_mix	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 56
	push	ebp
	mov	ebp, esp
; Line 57
	fld	DWORD PTR _b$[ebp]
	fld	DWORD PTR _a$[ebp]
	fsub	ST(1), ST(0)
	fxch	ST(1)
	fmul	DWORD PTR _t$[ebp]
	faddp	ST(1), ST(0)
; Line 58
	pop	ebp
	ret	0
_mix	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _smoothstep
_TEXT	SEGMENT
_edge0$ = 8						; size = 4
_edge1$ = 12						; size = 4
_x$ = 16						; size = 4
_smoothstep PROC					; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 50
	push	ebp
	mov	ebp, esp
; Line 51
	fld1
	sub	esp, 12					; 0000000cH
	fstp	DWORD PTR [esp+8]
	fldz
	fstp	DWORD PTR [esp+4]
	fld	DWORD PTR _x$[ebp]
	fld	DWORD PTR _edge0$[ebp]
	fsub	ST(1), ST(0)
	fsubr	DWORD PTR _edge1$[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR [esp]
	call	_clamp
; Line 52
	fld	ST(0)
	add	esp, 12					; 0000000cH
	fadd	ST(0), ST(1)
	fsubr	DWORD PTR __real@40400000
	fxch	ST(1)
	fmul	ST(0), ST(0)
	fmulp	ST(1), ST(0)
; Line 53
	pop	ebp
	ret	0
_smoothstep ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _clamp
_TEXT	SEGMENT
_x$ = 8							; size = 4
_lowerlimit$ = 12					; size = 4
_upperlimit$ = 16					; size = 4
_clamp	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 43
	push	ebp
	mov	ebp, esp
; Line 44
	fld	DWORD PTR _lowerlimit$[ebp]
	fld	DWORD PTR _x$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN6@clamp
	fstp	ST(0)
	jmp	SHORT $LN2@clamp
$LN6@clamp:
	fstp	ST(1)
$LN2@clamp:
; Line 45
	fld	DWORD PTR _upperlimit$[ebp]
	fcom	ST(1)
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN9@clamp
	fstp	ST(1)
; Line 47
	pop	ebp
	ret	0
$LN9@clamp:
; Line 45
	fstp	ST(0)
; Line 47
	pop	ebp
	ret	0
_clamp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _floorj
_TEXT	SEGMENT
_tmp$1 = -4						; size = 4
_x$ = 8							; size = 4
_x$ = 8							; size = 4
_floorj	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 39
	fld	DWORD PTR _x$[ebp]
	fsub	DWORD PTR __real@3f000000
	fstp	DWORD PTR _x$[ebp]
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$1[ebp]
	fild	DWORD PTR _tmp$1[ebp]
; Line 40
	leave
	ret	0
_floorj	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _asmPow
_TEXT	SEGMENT
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_asmPow	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 17
	push	ebp
	mov	ebp, esp
; Line 19
	fld	DWORD PTR _b$[ebp]
; Line 20
	fld	DWORD PTR _a$[ebp]
; Line 21
	fyl2x
; Line 22
	fist	DWORD PTR _b$[ebp]
; Line 23
	fild	DWORD PTR _b$[ebp]
; Line 24
	fsubp	ST(1), ST(0)
; Line 25
	f2xm1
; Line 26
	fld1
; Line 27
	faddp	ST(1), ST(0)
; Line 28
	fild	DWORD PTR _b$[ebp]
; Line 29
	fxch	ST(1)
; Line 30
	fscale
; Line 31
	fstp	DWORD PTR _a$[ebp]
; Line 32
	fstp	DWORD PTR _b$[ebp]
; Line 33
	fld	DWORD PTR _a$[ebp]
; Line 35
	pop	ebp
	ret	0
_asmPow	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _f2i
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_x$ = 8							; size = 4
_f2i	PROC						; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 7
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 10
	fld	DWORD PTR _x$[ebp]
; Line 11
	fistp	DWORD PTR _tmp$[ebp]
; Line 13
	mov	eax, DWORD PTR _tmp$[ebp]
; Line 14
	leave
	ret	0
_f2i	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _runSynth@4
_TEXT	SEGMENT
_tmp$1 = -12						; size = 4
_tmp$2 = -8						; size = 4
tv197 = -4						; size = 4
_i$3 = -4						; size = 4
_x$ = 8							; size = 4
_x$ = 8							; size = 4
_buffer$ = 8						; size = 4
_runSynth@4 PROC					; COMDAT
; File d:\dev\raw4k\synth\synth.c
; Line 160
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 161
	fld	DWORD PTR __real@37be37c6
	push	esi
	xor	esi, esi
	push	edi
	mov	edi, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _i$3[ebp], esi
$LN4@runSynth:
; Line 163
	fimul	DWORD PTR _i$3[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_getSound
; Line 164
	fmul	DWORD PTR __real@46fffe00
	pop	ecx
	fst	DWORD PTR tv197[ebp]
	fstp	DWORD PTR _x$[ebp]
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$2[ebp]
	mov	ax, WORD PTR _tmp$2[ebp]
; Line 165
	fld	DWORD PTR tv197[ebp]
	fstp	DWORD PTR _x$[ebp]
	mov	WORD PTR [edi+esi*4], ax
	fld	DWORD PTR _x$[ebp]
	fistp	DWORD PTR _tmp$1[ebp]
	mov	ax, WORD PTR _tmp$1[ebp]
	fld	DWORD PTR __real@37be37c6
	mov	WORD PTR [edi+esi*4+2], ax
	inc	esi
	mov	DWORD PTR _i$3[ebp], esi
	cmp	esi, 2205000				; 0021a548H
	jl	SHORT $LN4@runSynth
; Line 167
	pop	edi
	fstp	ST(0)
	pop	esi
	leave
	ret	4
_runSynth@4 ENDP
_TEXT	ENDS
END
